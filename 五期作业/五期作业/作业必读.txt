 第一部分 作用域和闭包


作用域是什么？？？？？


        作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。

        在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编译

        1、分词/词法分析

        考虑程序 var a = 2;。这段程序通常会被分解成 为下面这些词法单元：
        var、a、=、2 、;。
        空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。

        2、解析/语法分析  “抽象语法树”（Abstract Syntax Tree，AST）。 
        var a = 2; 的抽象语法树中
        可能会有一个叫作 VariableDeclaration 的顶级节点，接下 来是
        一个叫作 Identifier（它的值是 a）的子节点，
        以及一个叫作 AssignmentExpression 的子节点。AssignmentExpression 节点有一个叫作 NumericLiteral（它的值是 2）的子 节点。

        3、代码生成
        将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息 息相关
         将 var a = 2; 的 AST 转化为一组机器指 令，用来创建一个叫作 a 的变量（包括分配内存等），并将一个值储存在 a 中。

        JavaScript 引擎
        要复杂得多。例如，在 语法分析和代码生成阶段有特定的步骤来对运行性能进行优化，包括对冗余元素进行优化 等



        如果查找的目的是对 变量进行赋值，那么就会使用 LHS 查询；
        如果目的是获取变量的值，就会使用 RHS 查询。

          赋值操作符会导致    
        LHS 查询。
        ＝操作符 
        或调用函数时传入参数的操作 
        都会导致  关联作用域 的赋值操作。



        JavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中
        ，像 var a = 2 这样的声 明会被分解成两个独立的步骤：

        1. 首先，var a 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。
        2. 接下来，a = 2 会查询（LHS 查询）变量 a 并对其进行赋值。


        LHS 和 RHS 查询
        都会在当前执行作用域中开始，
        如果有需要
        （也就是说它们没有找到所 需的标识符），

        就会向上级作用域继续查找目标标识符，
        这样每次上升一级作用域（一层 楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。\

        不成功的 RHS 引用会导致抛出 ReferenceError 异常。
        不成功的 LHS 引用会导致自动隐式 地创建一个全局变量（非严格模式下），
        该变量使用 LHS 引用的目标作为标识符，或者抛 出 ReferenceError 异常（严格模式下）。

function foo(a) {     var b = a;     return a + b; } 
 
var c = foo( 2 );
1. 找出所有的 LHS 查询（这里有 3 处！） c = ..;、a = 2（隐式变量分配）、b = ..
2. 找出所有的 RHS 查询（这里有 4 处！） foo(2..、= a;、a ..、.. b



第2章 词法作用域

eval(..) 和 with 会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词 法作用域。


词法作用域意味着作用域是
由书写代码时函数声明的位置来决定的。
编译的词法分析阶段 基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它 们进行查找。

JavaScript 中有两个机制可以“欺骗”词法作用域：
eval(..) 
和 with。
前者可以对一段包 含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在 运行时）。

后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作 用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。
这两个机制的副作用是引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认 为这样的优化是无效的。

使用这其中任何一个机制都将导致代码运行变慢。

！！！！！不要使用它们



第3章 函数作用域和块作用域

函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会 在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。
但函数不是唯一的作用域单元。

块作用域指的是变量和函数不仅可以属于所处的作用域， 也可以属于某个代码块（通常指 { .. } 内部）。

从 ES3 开始，try/catch 结构在 catch 分句中具有块作用域。

在 ES6 中引入了 let 关键字（var 关键字的表亲），用来在任意代码块中声明变量。
if (..) { let a = 2; } 会声明一个劫持了
 if 的 { .. } 块的变量，
    并且将变量添加到这个块 中。

有些人认为块作用域不应该完全作为函数作用域的替代方案。两种功能应该同时存在，开 发者可以并且也应该根据需要选择使用何种作用域，创造可读、可维护的优良代码。


第4章 

我们习惯将 var a = 2; 
看作一个声明，
而实际上 JavaScript 引擎并不这么认为。
它将 var a 和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。
这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的 最顶端，这个过程被称为提升。
声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。
要注意避免重复声明，特别是当普通的 var 声明和函数声明混合在一起的时候，否则会引 起很多危险的问题！


第5章 作用域闭包

闭包就好像从 JavaScript 中分离出来的一个充满神秘色彩的未开化世界，只有最勇敢的人 才能够到达那里。但实际上它只是一个标准，显然就是关于如何在函数作为值按需传递的 词法环境中书写代码的。
当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时 就产生了闭包。
如果没能认出闭包，也不了解它的工作原理，在使用它的过程中就很容易犯错，比如在循 环中。但同时闭包也是一个非常强大的工具，可以用多种形式来实现模块等模式。
模块有两个主要特征： （1）为创建内部作用域而调用了一个包装函数； （2）包装函数的返回 值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭 包。
现在我们会发现代码中到处都有闭包存在，并且我们能够识别闭包然后用它来做一些有用 的事！


动态作用域

词法作用域最重要的特征是它的定义过程发生在代码的书写阶段（假设你没有使用 eval() 或 with）。
动态作用域似乎暗示有很好的理由让作用域作为一个在运行时就被动态确定的形式，而不 是在写代码时进行静态确定的形式

function foo() {     console.log( a ); // 2
 } 
 
function bar() {     var a = 3;     foo(); } 
 
var a = 2; 
 
bar();
词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。

avaScript 具有动态作用域，理论上，下面代码中的 foo() 在执行时将会输出 3。
function foo() {     console.log( a ); // 3（不是 2 ！）
 } 
 
function bar() {     var a = 3;     foo(); } 
 
var a = 2; 
 
bar();
因为当 foo() 无法找到 a 的变量引用时，会顺着调用栈在调用 foo() 的地 方查找 a，而不是在嵌套的词法作用域链中向上查找。由于 foo() 是在 bar() 中调用的， 引擎会检查 bar() 的作用域，并在其中找到值为 3 的变量 a。

词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定 的。（this 也是！）词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。
最后，this 关注函数如何调用，这就表明了 this 机制和动态作用域之间的关系多么紧密。 


块作用域的替代方案

着 ES6 中引入了 let，我们的代码终于有了创建完整、不受约束的块作用域的能力。 


我们想在 ES6 之前的环境中使用块作用域呢？

{     let a = 2;     console.log( a ); // 2 } 
 
console.log( a ); // ReferenceError

这段代码在 ES6 环境中可以正常工作。但是在 ES6 之前的环境中如何才能实现这个效果？ 答案是使用 catch。
try{throw 2;}catch(a){     console.log( a ); // 2 } 
 
console.log( a ); // ReferenceError

catch 分句具有块作用域，因此它可以在 ES6 之前的环境中作为块作用域的替代 方案

Traceur 的项目，该项目正是用来将 ES6 代码转换成兼容 ES6 之前 的环境（大部分是 ES5，但不是全部）。TC39 委员会依赖这个工具（也有其他工具）来测 试他们指定的语义化相关的功能。

{     try {         throw undefined;     } catch (a) {         a = 2;         console.log( a );     } } 
 
console.log( a );
通过使用这样的工具，我们就可以在使用块作用域时无需考虑目标平台是否是 ES6 环境， 因为 try/catch 从 ES3 开始就存在


　隐式和显式作用域

// 块作用域时，我们的代码有一些可维护性和可扩展性方面的缺陷。有没有 其他可以使用块作用域，并且还能避免这种缺陷的途径？
// 考虑下面这种 let 的使用方法，它被称作 let 作用域或 let 声明（对比前面的 let 定义）。

// let (a = 2) {     console.log( a ); // 2 } 
 
// console.log( a ); // ReferenceError

// 同隐式地劫持一个已经存在的作用域不同，let 声明会创建一个显示的作用域并与其进行 绑定。显式作用域不仅更加突出，在代码重构时也表现得更加健壮。在语法上，通过强制 性地将所有变量声明提升到块的顶部来产生更简洁的代码。这样更容易判断变量是否属于 某个作用域。

// 在函数作用域中手动将 var 声明提升到函数顶部的方式很接近。let 声 明有意将变量声明放在块的顶部，

// 如果你并没有到处使用 let 定义，那么你的块作用域就 很容易辨识和维护。

// ，let 声明并不包含在 ES6 中。官方的 Traceur 编译器也不接受这 种形式的代码。
// 我们有两个选择，使用合法的 ES6 语法并且在代码规范性上做一些妥协

// /*let*/ { let a = 2;     console.log( a ); } 
 
// console.log( a ); // ReferenceError

// 一个名为 let-er 的工具来解决这个问题。let-er 是一个构建时的代码转换器，
 // 但它唯一的作用就是找到 let 声明并对其进行转换
// 不会处理包括 let 定义在内的任何 其他代码

// ，let-er 还有一个设置项 --es6，开启它（默认是关闭的）会改变生成代码的种类。开 启这个设置项时 let-er 会生成完全标准的 ES6 代码，

// 不会生成通过 try/catch 进行 hack 的 ES3 替代方案

// {     let a = 2;     console.log( a ); } 
 
// console.log( a ); // ReferenceError
// 因此你马上就可以在 ES6 之前的所有环境中使用 let-er，当你只关注 ES6 环境时，可以开
// 块作用域的替代方案   ｜   63
// 启设置项，这样就会生成标准的 ES6 代码。
// 更重要的，你甚至可以使用尚未成为 ES 官方标准的、更加好用的显式 let 声明。


// 　性能



// “为什么不直接使用 IIFE 来创 建作用域”这个问题。
// ？？？？？？？？？？？？？？？？？？？？？？

// ，try/catch 的性能的确很糟糕，但技术层面上没有合理的理由来说明 try/catch 必 须这么慢，或者会一直慢下去。自从 TC39 支持在 ES6 的转换器中使用 try/catch 后， Traceur 团队已经要求 Chrome 对 try/catch 的性能进行改进，他们显然有很充分的动机来 做这件事情。

// ，IIFE 和 try/catch 并不是完全等价的，因为如果将一段代码中的任意一部分拿出来 用函数进行包裹，会改变这段代码的含义，其中的 this、return、break 和 contine 都会 发生变化。IIFE 并不是一个普适的解决方案，它只适合在某些情况下进行手动操作。

// ：你是否想要块作用域？如果你想要，这些工具就可以帮助你。如果不 想要，继续使用 var 来写代码就好了！


// this词法

// ES6 添加了一个特殊的语法形式用于函数声明，叫作箭头函数。它看起来是下面这样的：
// var foo = a => {     console.log( a ); }; 
 
// foo( 2 ); // 2

// 的 function 关键字的简写

// var obj = {     id: "awesome",     cool: function coolFn() {         console.log( this.id );     } }; 
 
// var id = "not awesome" 
 
// obj.cool(); // 酷 
 
// setTimeout( obj.cool, 100 ); // 不酷

// 在于 cool() 函数丢失了同 this 之间的绑定。解决这个问题有好几种办法，但最长用 的就是 var self = this;。

// 使用起来如下所示：
// var obj = {     count: 0,     cool: function coolFn() {         var self = this; 
 
//         if (self.count < 1) {             setTimeout( function timer(){                 self.count++;                 console.log( "awesome?" );             }, 100 );         }     } }; 
 
// obj.cool(); // 酷吧？
// var self = this 这种解决方案圆满解决了理解和正确使用 this 绑定的问题，并且没有把 问题过于复杂化，它使用的是我们非常熟悉的工具：词法作用域。self 只是一个可以通过 词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。

// ES6 中的箭头函数引入了一个叫作 this 词法的行为：
// var obj = {      count: 0,     cool: function coolFn() {         if (this.count < 1) {             setTimeout( () => { // 箭头函数是什么鬼东西？                 this.count++;                 console.log( "awesome?" );             }, 100 );         }     } }; 
 
// obj.cool(); 

// ！！！！！！！！！！！！！！！！！
// ，箭头函数在涉及 this 绑定时的行为和普通函数的行为完全不一致。它放弃了所 有普通 this 绑定的规则，取而代之的是用当前的词法作用域覆盖了 this 本来的值。
// ！！！！！！！！！！！！！

// 这个代码片段中的箭头函数并非是以某种不可预测的方式同所属的 this 进行了解绑 定，而只是“继承”了 cool() 函数的 this 绑定（因此调用它并不会出错）。

// 认为箭头函数将程序员们经常犯的一个错误给标准化了， 也就是混淆了 this 绑定规则和词法作用域规则。

// 为什么要自找麻烦使用 this 风格的代码模式呢？把它和词法作用域结合在一起 非常让人头疼。在代码中使用两种风格其中的一种是非常自然的事情，但是不要将两种风 格混在一起使用。

// 导致箭头函数不够理想的原因是它们是匿名而非具名的。具名函数比 匿名函数更可取


// 解决这个“问题”的另一个更合适的办法是正确使用和包含 this 机制。
// var obj = {     count: 0,     cool: function coolFn() {         if (this.count < 1) {             setTimeout( function timer(){                 this.count++; // this 是安全的                               // 因为 bind(..)                 console.log( "more awesome" );             }.bind( this ), 100 ); // look, bind()!         }     }  }; 
 
// obj.cool(); // 更酷了。
// 无论你是喜欢箭头函数中 this 词法的新行为模式，还是喜欢更靠得住的 bind()，都需要 注意箭头函数不仅仅意味着可以少写代码。























第二部分this和对象原型











// 关于this
// this 关键字是 JavaScript 中最复杂的机制之一。它是一个很特别的关键字，被自动定义在 所有函数的作用域中

// 　为什么要用this??????????????

// function identify() {     return this.name.toUpperCase(); } 
 
// function speak() {     var greeting = "Hello, I'm " + identify.call( this );     console.log( greeting ); } 
 
// var me = {     name: "Kyle" }; 
 
// var you = {     name: "Reader" }; 
 
// identify.call( me ); // KYLE identify.call( you ); // READER 
 
// speak.call( me ); // Hello, 我是 KYLE speak.call( you ); // Hello, 我是 READER

// 这段代码可以在不同的上下文对象（me 和 you）中重复使用函数 identify() 和 speak()， 不用针对每个对象编写不同版本的函数。
// 如果不使用 this，那就需要给 identify() 和 speak() 显式传入一个上下文对象。
// function identify(context) {     return context.name.toUpperCase(); } 
 
// function speak(context) {     var greeting = "Hello, I'm " + identify( context );     console.log( greeting ); } 
 
// identify( you ); // READER speak( me ); //hello, 我是 KYLE
// 然而，this 提供了一种更优雅的方式来隐式“传递”一个对象引用，因此可以将 API 设计 得更加简洁并且易于复用。


// ，显式传递上下文对象会让代码变得越来越混乱，使用 this 则不会这样。


// 　指向自身 

// 为什么需要从函数内部引用函数自身呢？常见的原因是递归（从函数内部调用这个函 数）或者可以写一个在第一次被调用后自己解除绑定的事件处理器。

// ，既然函数看作一个对象（JavaScript 中的所有函数都 是对象），那就可以在调用函数时存储状态（属性的值）。这是可行的，有些时候也确实有 用，

// ，除了函数对象还有许多更合适存储状态 的地方


// function foo(num) {     console.log( "foo: " + num ); 
 
//     // 记录 foo 被调用的次数     this.count++; } 
 
// foo.count = 0; 
 
// var i; 
 
// for (i=0; i<10; i++) {     if (i > 5) {         foo( i );     } } // foo: 6 // foo: 7 // foo: 8 // foo: 9 
 
// // foo 被调用了多少次？ console.log( foo.count ); // 0 -- WTF?
// 关于this   ｜   77
// console.log 语句产生了 4 条输出，证明 foo(..) 确实被调用了 4 次，但是 foo.count 仍然 是 0。显然从字面意思来理解 this 是错误的。

// 执行 foo.count = 0 时，的确向函数对象 foo 添加了一个属性 count。但是函数内部代码 this.count 中的 this 并不是指向那个函数对象，所以虽然属性名相同，根对象却并不相 同，

// “如果我增加的 count 属性和预期的不一样，那我增 加的是哪个 count ？”实际上，如果他深入探索的话，就会发现这段代码在 无意中创建了一个全局变量 count

// 它的值为 NaN

// 比如创建另一个带有 count 属性的对象。
// function foo(num) {     console.log( "foo: " + num ); 
 
//     // 记录 foo 被调用的次数     data.count++; } 
 
// var data = {     count: 0 }; 
 
// var i; 
 
// for (i=0; i<10; i++) {     if (i > 5) {         foo( i );     } } // foo: 6 // foo: 7 // foo: 8 // foo: 9 
 
// // foo 被调用了多少次？ console.log( data.count ); // 4
// 从某种角度来说这个方法确实“解决”了问题，但可惜它忽略了真正的问题――无法理解 this 的含义和工作原理

// function foo() {     foo.count = 4; // foo 指向它自身 } 
 
// setTimeout( function(){     // 匿名（没有名字的）函数无法指向自身 }, 10 );
// 第一个函数被称为具名函数，在它内部可以使用 foo 来引用自身。



// 传入 setTimeout(..) 的回调函数没有名称标识符（这种函数被称为 匿名函数），因此无法从函数内部引用自身。
// 还有一种传统的但是现在已经被弃用和批判的用法，是使用 arguments. callee 来引用当前正在运行的函数对象。这是唯一一种可以从匿名函数对象 内部引用自身的方法。然而，更好的方式是避免使用匿名函数，至少在需要 自引用时使用具名函数（表达式）。

// arguments.callee 已经被弃用，不应该再 使用它。


// 词法作用域



// ，另一种解决方法是使用 foo 标识符替代 this 来引用函数 对象：
// function foo(num) {     console.log( "foo: " + num ); 
 
//     // 记录 foo 被调用的次数     foo.count++; } foo.count=0 var i; 
 
// for (i=0; i<10; i++) {     if (i > 5) {         foo( i );     } } 
// foo: 6 // foo: 7 // foo: 8 // foo: 9 
 
// foo 被调用了多少次？ console.log( foo.count ); // 4
// 然而，这种方法同样回避了 this 的问题，并且完全依赖于变量 foo 的词法作用域。



// 另一种方法是强制 this 指向 foo 函数对象：
// function foo(num) {     console.log( "foo: " + num ); 
 
//     // 记录 foo 被调用的次数     // 注意，在当前的调用方式下（参见下方代码），this 确实指向 foo     this.count++; } 
 
// foo.count = 0; 
 
// var i; 
 
// for (i=0; i<10; i++) {     if (i > 5) {         // 使用 call(..) 可以确保 this 指向函数对象 foo 本身         foo.call( foo, i );     } } // foo: 6 // foo: 7 // foo: 8 // foo: 9 
 
// foo 被调用了多少次？ console.log( foo.count ); // 4


// ，它试图（但是没有成功）跨越边界，使用 this 来隐式引用函数的词 法作用域：
// function foo() {     var a = 2;     this.bar(); } 
 
// function bar() {     console.log( this.a ); } 
 
// foo(); // ReferenceError: a is not defined


// 这段代码试图通过 this.bar() 来引用 bar() 函数。这是绝对不可能成功的，我们之 后会解释原因。调用 bar() 最自然的方法是省略前面的 this，直接使用词法引用标识符。

//  this 联通 foo() 和 bar() 的词法作用域，从而让 bar() 可以访问 foo() 作用域里的变量 a。这是不可能实现的，你不能使用 this 来引用一 个词法作用域内部的东西。




//  this 是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调 用时的各种条件。this 的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。
// 当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包 含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this 就是记录的 其中一个属性，会在函数执行的过程中用到。


// this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用



// 第2章 this全面解析


// 判断this
// 现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的 顺序来进行判断：
// 1. 函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。 var bar = new foo()
// 2. 函数是否通过 call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是 指定的对象。 var bar = foo.call(obj2)
// 3. 函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上 下文对象。 var bar = obj1.foo()
// 4. 如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到 全局对象。 var bar = foo()


// 经常编写 this 风格的代码，但是绝大部分时候都会使用 self = this 或者箭头函数 来否定 this 机制，那你或许应当：
// 1. 只使用词法作用域并完全抛弃错误 this 风格的代码； 2. 完全采用 this 风格，在必要时使用 bind(..)，尽量避免使用 self = this 和箭头函数。
// this全面解析   ｜   101
// 当然，包含这两种代码风格的程序可以正常运行，但是在同一个函数或者同一个程序中混 合使用这两种风格通常会使代码更难维护，并且可能也会更难编写。


// 如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后 就可以顺序应用下面这四条规则来判断 this 的绑定对象。
// 1. 由 new 调用？绑定到新创建的对象。 2. 由 call 或者 apply（或者 bind）调用？绑定到指定的对象。 3. 由上下文对象调用？绑定到那个上下文对象。 4. 默认：在严格模式下绑定到 undefined，否则绑定到全局对象。
// 一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑 定，你可以使用一个 DMZ 对象，比如 ? = Object.create(null)，以保护全局对象。




// 第3章 对象

// 了函数调用位置的不同会造成 this 绑定对象的不同。但是 对象到底是什么，为什么我们需要绑定它们呢？

// 枚举 之前介绍 enumerable 属性描述符特性时我们简单解释过什么是“可枚举性”

// var myObject = { }; 
 
// Object.defineProperty(     myObject,     "a",     // 让 a 像普通属性一样可以枚举     { enumerable: true, value: 2 } ); 
 
// Object.defineProperty(     myObject,     "b",     // 让 b 不可枚举     { enumerable: false, value: 3 } ); 
 
// myObject.b; // 3 ("b" in myObject); // true  myObject.hasOwnProperty( "b" ); // true 
 
// // ....... 
 
// for (var k in myObject) {      console.log( k, myObject[k] ); } // "a" 2
// 可以看到，myObject.b 确实存在并且有访问值，但是却不会出现在 for..in 循环中（尽管 可以通过 in 操作符来判断是否存在）。原因是“可枚举”就相当于“可以出现在对象属性 的遍历中”。

// 通过另一种方式来区分属性是否可枚举：
// var myObject = { }; 
 
// Object.defineProperty(     myObject,     "a",     // 让 a 像普通属性一样可以枚举     { enumerable: true, value: 2 } ); 
 
// Object.defineProperty( 
// 对象   ｜   121
//     myObject,     "b",     // 让 b 不可枚举     { enumerable: false, value: 3 } ); 
 
// myObject.propertyIsEnumerable( "a" ); // true myObject.propertyIsEnumerable( "b" ); // false  
 
// Object.keys( myObject ); // ["a"] Object.getOwnPropertyNames( myObject ); // ["a", "b"]
// propertyIsEnumerable(..) 会检查给定的属性名是否直接存在于对象中（而不是在原型链 上）并且满足 enumerable:true。
// Object.keys(..) 会返回一个数组，包含所有可枚举属性，Object.getOwnPropertyNames(..) 会返回一个数组，包含所有属性，无论它们是否可枚举。
// in 和 hasOwnProperty(..) 的区别在于是否查找 [[Prototype]] 链，然而，Object.keys(..) 和 Object.getOwnPropertyNames(..) 都只会查找对象直接包含的属性。



// 　遍历
// for..in 循环可以用来遍历对象的可枚举属性列表（包括 [[Prototype]] 链）。

// JavaScript 中的对象有字面形式（比如 var a = { .. }）和构造形式（比如 var a = new Array(..)）。字面形式更常用，不过有时候构造形式可以提供更多选项。
// 许多人都以为“JavaScript 中万物都是对象”，这是错误的。对象是 6 个（或者是 7 个，取 决于你的观点）基础类型之一。对象有包括 function 在内的子类型，不同子类型具有不同 的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。
// 对象就是键 / 值对的集合。可以通过 .propName 或者 ["propName"] 语法来获取属性值。访 问属性时，引擎实际上会调用内部的默认 [[Get]] 操作（在设置属性值时是 [[Put]]）， [[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话还会查找 [[Prototype]] 链
// 属性的特性可以通过属性描述符来控制，比如 writable 和 configurable。此外，可以使用 Object.preventExtensions(..)、Object.seal(..) 和 Object.freeze(..) 来设置对象（及其 属性）的不可变性级别。
// 属性不一定包含值――它们可能是具备 getter/setter 的“访问描述符”。此外，属性可以是 可枚举或者不可枚举的，这决定了它们是否会出现在 for..in 循环中。
// 你可以使用 ES6 的 for..of 语法来遍历数据结构（数组、对象，等等）中的值，for..of 会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值




// 第4章 混合对象“类”

// 构造函数 
// 类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数。

// class CoolGuy {      specialTrick = nothing 
 
//     CoolGuy( trick ) {         specialTrick = trick     } 
 
//     showOff() {         output( "Here's my trick: ", specialTrick )     }  }
// 我们可以调用类构造函数来生成一个 CoolGuy 实例：
// Joe = new CoolGuy( "jumping rope" )  
 
// Joe.showOff() // 这是我的绝技：跳绳
// 注意，CoolGuy 类有一个 CoolGuy() 构造函数，执行 new CoolGuy() 时实际上调用的就是 它。构造函数会返回一个对象（也就是类的一个实例），之后我们可以在这个对象上调用 showOff() 方法，来输出指定 CoolGuy 的特长


// 类的继承
// class Vehicle {      engines = 1 
 
//     ignition() {         output( "Turning on my engine." );     } 
 
//     drive() {         ignition();         output( "Steering and moving forward!" )     } } 
 
// class Car inherits Vehicle {     wheels = 4 
 
//     drive() {         inherited:drive()         output( "Rolling on all ", wheels, " wheels!" )     }  } 
 
// class SpeedBoat inherits Vehicle {      engines = 2 
 
//     ignition() {         output( "Turning on my ", engines, " engines." )     } 
 
//     pilot() {         inherited:drive()         output( "Speeding through the water with ease!" )     }  }
// 132   ｜   第 4 章
// 为了方便理解并缩短代码，我们省略了这些类的构造函数。
// 我们通过定义 Vehicle 类来假设一种发动机，一种点火方式，一种驾驶方法。但是你不可 能制造一个通用的“交通工具”，因为这个类只是一个抽象的概念。
// 接下来我们定义了两类具体的交通工具：Car 和 SpeedBoat。它们都从 Vehicle 继承了通用 的特性并根据自身类别修改了某些特性。

// 4.3.1　多态
// 多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。类的继承其实就是 复制。

// 4.3.2　多重继承
// 对于类来说这似乎是一个非常有用的功能，可以把许多功能组合在一起。然 而，这个机制同时也会带来很多复杂的问题。如果两个父类中都定义了 drive() 方法的话， 子类引用的是哪个呢？难道每次都需要手动指定具体父类的 drive() 方法吗？这样多态继 承的很多优点就存在了。
// 除此之外，还有一种被称为钻石问题的变种。在钻石问题中，子类 D 继承自两个父类（B 和 C），这两个父类都继承自 A。如果 A 中有 drive() 方法并且 B 和 C 都重写了这个方法 （多态），那当 D 引用 drive() 时应当选择哪个版本呢（B:drive() 还是 C:drive()）？
// 这些问题远比看上去要复杂得多。之所以要介绍这些问题，主要是为了和 JavaScript 的机 制进行对比。
// 相比之下，JavaScript 要简单得多：它本身并不提供“多重继承”功能。许多人认为这是 件好事，因为使用多重继承的代价太高 

// 4.4.1　显式混入

// 非常简单的 mixin(..) 例子 : function mixin( sourceObj, targetObj ) {      for (var key in sourceObj) {         // 只会在不存在的情况下复制         if (!(key in targetObj)) {              targetObj[key] = sourceObj[key];         }      } 
 
//     return targetObj;  } 
 
// var Vehicle = {      engines: 1, 
 
//     ignition: function() {         console.log( "Turning on my engine." );     }, 
 
//     drive: function() {          this.ignition();         console.log( "Steering and moving forward!" );     } }; 
 
// var Car = mixin( Vehicle, {     wheels: 4, 
 
//     drive: function() {          Vehicle.drive.call( this );          console.log(            "Rolling on all " + this.wheels + " wheels!"          );     }  } 

// Vehicle 和 Car 都是对象，供我们分别进行复制和粘贴。
// 现在 Car 中就有了一份 Vehicle 属性和函数的副本了。从技术角度来说，函数实际上没有 被复制，复制的是函数引用。所以，Car 中的属性 ignition 只是从 Vehicle 中复制过来的 对于 ignition() 函数的引用。相反，属性 engines 就是直接从 Vehicle 中复制了值 1。
// Car 已经有了 drive 属性（函数），所以这个属性引用并没有被 mixin 重写，从而保留了 Car 中定义的同名属性，实现了“子类”对“父类”属性的重写（参见 mixin(..) 例子中 的 if 语句）。



// 类是一种设计模式。许多语言提供了对于面向类软件设计的原生语法。JavaScript 也有类 似的语法，但是和其他语言中的类完全不同。
// 类意味着复制。
// 传统的类被实例化时，它的行为会被复制到实例中。类被继承时，行为也会被复制到子类 中。
// 多态（在继承链的不同层次名称相同但是功能不同的函数）看起来似乎是从子类引用父 类，但是本质上引用的其实是复制的结果。
// JavaScript 并不会（像类那样）自动创建对象的副本。
// 混入模式（无论显式还是隐式）可以用来模拟类的复制行为，但是通常会产生丑陋并且脆 弱的语法，比如显式伪多态
// （OtherObj.methodName.call(this, ...)），这会让代码更加难 懂并且难以维护。
// 此外，显式混入实际上无法完全模拟类的复制行为，因为对象（和函数！别忘了函数也 是对象）只能复制引用，无法复制被引用的对象或者函数本身。



// 第5章 原型

 // [[Prototype]] 链

 // JavaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，其实就是对于其他对象的引 用。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。

// 所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype。由于所有的“普通” （内置，不是特定主机的扩展）对象都“源于”（或者说把 [[Prototype]] 链的顶端设置为） 这个 Object.prototype 对象

// 于原型链上层时 myObject.foo = "bar" 会出现的三种情况。
// 1. 如果在 [[Prototype]] 链上层存在名为 foo 的普通数据访问属性（参见第 3 章）并且没 有被标记为只读（writable:false），那就会直接在 myObject 中添加一个名为 foo 的新 属性，它是屏蔽属性。 2. 如果在 [[Prototype]] 链上层存在 foo，但是它被标记为只读（writable:false），那么 无法修改已有属性或者在 myObject 上创建屏蔽属性。如果运行在严格模式下，代码会 抛出一个错误。否则，这条赋值语句会被忽略。总之，不会发生屏蔽。 3. 如果在 [[Prototype]] 链上层存在 foo 并且它是一个 setter（参见第 3 章），那就一定会 调用这个 setter。foo 不会被添加到（或者说屏蔽于）myObject，也不会重新定义 foo 这 个 setter。


// JavaScript 开发者绞尽脑汁想要模仿类的行为：
// function Foo(name) {      this.name = name; } 
 
// Foo.prototype.myName = function() {      return this.name; };  
 
// var a = new Foo( "a" ); var b = new Foo( "b" );  
 
// a.myName(); // "a" b.myName(); // "b"
// 这段代码展示了另外两种“面向类”的技巧：
// 1. this.name = name 给每个对象（也就是 a 和 b，参见第 2 章中的 this 绑定）都添加 了 .name 属性，有点像类实例封装的数据值。 2. Foo.prototype.myName = ... 可能个更有趣的技巧，它会给 Foo.prototype 对象添加一 个属性（函数）。现在，a.myName() 可以正常工作，但是你可能会觉得很惊讶，这是什 么原理呢？
// 在这段代码中，看起来似乎创建 a 和 b 时会把 Foo.prototype 对象复制到这两个对象中， 然而事实并不是这样。

// 如果要访问对象中并不存在的一个属性，[[Get]] 操作（参见第 3 章）就会查找对象内部 [[Prototype]] 关联的对象。这个关联关系实际上定义了一条“原型链”（有点像嵌套的作
// 用域链），在查找属性时会对它进行遍历。
// 所有普通对象都有内置的 Object.prototype，指向原型链的顶端（比如说全局作用域），如 果在原型链中找不到指定的属性就会停止。toString()、valueOf() 和其他一些通用的功能 都存在于 Object.prototype 对象上，因此语言中所有的对象都可以使用它们。
// 关联两个对象最常用的方法是使用 new 关键词进行函数调用，在调用的 4 个步骤（第 2 章）中会创建一个关联其他对象的新对象。
// 使用 new 调用函数时会把新对象的 .prototype 属性关联到“其他对象” 。带 new 的函数调用 通常被称为“构造函数调用” ，尽管它们实际上和传统面向类语言中的类构造函数不一样。
// 虽然这些 JavaScript 机制和传统面向类语言中的“类初始化”和“类继承”很相似，但 是 JavaScript 中的机制有一个核心区别，那就是不会进行复制，对象之间是通过内部的 [[Prototype]] 链关联的。
// 出于各种原因，以“继承”结尾的术语（包括“原型继承”）和其他面向对象的术语都无 法帮助你理解 JavaScript 的真实机制（不仅仅是限制我们的思维模式）。
// 相比之下，“委托”是一个更合适的术语，因为对象之间的关系不是复制而是委托。


// 第6章 行为委托

// 反类
// 需要用一个 Controller 父类、两个子类加上合成来对这个问题进行建模 吗？能不能使用对象关联风格的行为委托来实现更简单的设计呢？当然可以！
// var LoginController = {      errors: [],     getUser: function() {         return document.getElementById(            "login_username"         ).value;      },     getPassword: function() {         return document.getElementById(            "login_password"         ).value;      },     validateEntry: function(user,pw) {          user = user || this.getUser();          pw = pw || this.getPassword(); 
 
//         if (!(user && pw)) {              return this.failure(                "Please enter a username & password!"             );          }         else if (user.length < 5) {              return this.failure(                "Password must be 5+ characters!"             );          } 
 
//         // 如果执行到这里说明通过验证         return true;      },     showDialog: function(title,msg) {         // 给用户显示标题和消息     },     failure: function(err) {         this.errors.push( err );         this.showDialog( "Error", "Login invalid: " + err );      } }; // 让 AuthController 委托 LoginController var AuthController = Object.create( LoginController ); 
 
// AuthController.errors = [];  AuthController.checkAuth = function() {     var user = this.getUser();      var pw = this.getPassword(); 
 
//     if (this.validateEntry( user, pw )) {          this.server( "/check-auth",{             user: user, 
//             pw: pw          } )         .then( this.accepted.bind( this ) )         .fail( this.rejected.bind( this ) );      } }; AuthController.server = function(url,data) {     return $.ajax( {          url: url,         data: data      } ); }; AuthController.accepted = function() {     this.showDialog( "Success", "Authenticated!" )  }; AuthController.rejected = function(err) {      this.failure( "Auth Failed: " + err ); };
// 由于 AuthController 只是一个对象（LoginController 也一样），因此我们不需要实例化 （比如 new AuthController()），只需要一行代码就行：
// AuthController.checkAuth();
// 借助对象关联，你可以简单地向委托链上添加一个或多个对象，而且同样不需要实例化：
// var controller1 = Object.create( AuthController );  var controller2 = Object.create( AuthController );
// 在行为委托模式中，AuthController 和 LoginController 只是对象，它们之间是兄弟关系， 并不是父类和子类的关系。代码中 AuthController 委托了 LoginController，反向委托也 完全没问题。
// 这种模式的重点在于只需要两个实体（LoginController 和 AuthController），而之前的模 式需要三个。

// 我们避免了面向类设计模式中的多态。我们在不同的对象中没有使用相同的函 数名 success(..) 和 failure(..)，这样就不需要使用丑陋的显示伪多态。相反，在 AuthController 中它们的名字是 accepted(..) 和 rejected(..)――可以更好地描述它们的 行为。
// 总结：我们用一种（极其）简单的设计实现了同样的功能，这就是对象关联风格代码和行 为委托设计模式的力量。

// 　更好的语法


// ES6 的 class 语法可以简洁地定义类方法，这个特性让 class 乍看起来更有吸引力（附录 A 会介绍为什么要避免使用这个特性）：
// class Foo {     methodName() { /* .. */ } }
// 我们终于可以抛弃定义中的关键字 function 了，

// 反词法
// 简洁方法有一个非常小但是非常重要的缺点。思考下面的代码：
// var Foo = {     bar() { /*..*/ },     baz: function baz() { /*..*/ } };
// 去掉语法糖之后的代码如下所示：
// var Foo = {     bar: function() { /*..*/ },      baz: function baz() { /*..*/ } };
// 看 到 区 别 了 吗？ 由 于 函 数 对 象 本 身 没 有 名 称 标 识 符， 所 以 bar() 的 缩 写 形 式 （function()..）实际上会变成一个匿名函数表达式并赋值给 bar 属性。相比之下，具名函 数表达式（function baz()..）会额外给 .baz 属性附加一个词法名称标识符 baz。


// 匿名函数没有 name 标识符，这会导致：
// 1. 调试栈更难追踪； 2. 自我引用（递归、事件（解除）绑定，等等）更难； 3. 代码（稍微）更难理解。

// var Foo = {     bar: function(x) {         if(x<10){            return Foo.bar( x * 2 );         } 
//         return x;      },     baz: function baz(x) {          if(x < 10){            return baz( x * 2 );          }         return x;      } };
// 在本例中使用 Foo.bar(x*2) 就足够了，但是在许多情况下无法使用这种方法，比如多个对 象通过代理共享函数、使用 this 绑定，等等。这种情况下最好的办法就是使用函数对象的 name 标识符来进行真正的自我引用。


// 在软件架构中你可以选择是否使用类和继承设计模式。大多数开发者理所当然地认为类是 唯一（合适）的代码组织方式，但是本章中我们看到了另一种更少见但是更强大的设计模
// 式：行为委托。

// 行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的 [[Prototype]] 机制本质上就是行为委托机制。也就是说，我们可以选择在 JavaScript 中努 力实现类机制（参见第 4 和第 5 章），也可以拥抱更自然的 [[Prototype]] 委托机制。
// 当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。
// 对象关联（对象之前互相关联）是一种编码风格，它倡导的是直接创建和关联对象，不把 它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现。








// A.1　class


// 第 6 章中的 Widget/Button 例子：

// class Widget {      constructor(width,height) {         this.width = width || 50;  
// 190   ｜   附录 A
//         this.height = height || 50;          this.$elem = null;     }     render($where){         if (this.$elem) {              this.$elem.css( {                 width: this.width + "px",                 height: this.height + "px"              } ).appendTo( $where );         }      } } 
 
// class Button extends Widget {      constructor(width,height,label) {         super( width, height );         this.label = label || "Default";         this.$elem = $( "<button>" ).text( this.label );     }     render($where) {         super( $where );         this.$elem.click( this.onClick.bind( this ) );      }     onClick(evt) {         console.log( "Button '" + this.label + "' clicked!" );     }  }

// 1. （基本上，下面会详细介绍）不再引用杂乱的 .prototype 了。 
// 2. Button 声 明 时 直 接“ 继 承 ” 了 Widget， 不 再 需 要 通 过 Object.create(..) 来 替 换 .prototype 对象，也不需要设置 .__proto__ 或者 Object.setPrototypeOf(..)。 
// 3. 可以通过 super(..) 来实现相对多态，这样任何方法都可以引用原型链上层的同名方 法。这可以解决第4 章提到过的那个问题：构造函数不属于类，所以无法互相引用―― super() 可以完美解决构造函数的问题。 
 
// 4. class 字面语法不能声明属性（只能声明方法）。看起来这是一种限制，但是它会排除 掉许多不好的情况，如果没有这种限制的话，原型链末端的“实例”可能会意外地获取 其他地方的属性（这些属性隐式被所有“实例”所“共享”）。所以，class 语法实际上 可以帮助你避免犯错。 5. 可以通过 extends 很自然地扩展对象（子）类型，甚至是内置的对象（子）类型，比如 Array 或 RegExp。没有 class ..extends 语法时，想实现这一点是非常困难的，基本上 只有框架的作者才能搞清楚这一点。


// A.2　class陷阱
// 使用基于 [[Prototype]] 的实时委托：
// class C {      constructor() {         this.num = Math.random();      }     rand() {         console.log( "Random: " + this.num );     }  } 
 
// var c1 = new C(); c1.rand(); // "Random: 0.4324299..." 
 
// C.prototype.rand = function() {     console.log( "Random: " + Math.round( this.num * 1000 )); }; 
 
// var c2 = new C(); c2.rand(); // "Random: 867"  
 
// c1.rand(); // "Random: 432" ――噢！

// 为什么要使用本质上不是类的 class 语法呢？

// class 语法无法定义类成员属性（只能定义方法），如果为了跟踪实例之间共享状态必须要 这么做，那你只能使用丑陋的 .prototype 语法，像这样：
// class C {      constructor() {         // 确保修改的是共享状态而不是在实例上创建一个屏蔽属性！          C.prototype.count++; 
 
//         // this.count 可以通过委托实现我们想要的功能         console.log( "Hello: " + this.count );     }  
// 192   ｜   附录 A
// } 
 
// // 直接向 prototype 对象上添加一个共享状态 C.prototype.count = 0; 
 
// var c1 = new C();  // Hello: 1 
 
// var c2 = new C();  // Hello: 2 
 
// c1.count === 2; // true  c1.count === c2.count; // true
// 这种方法最大的问题是，它违背了 class 语法的本意，在实现中暴露（泄露！） 了 .prototype。
// 如果使用 this.count++ 的话，我们会很惊讶地发现在对象 c1 和 c2 上都创建了 .count 属 性，而不是更新共享状态。class 没有办法解决这个问题，并且干脆就不提供相应的语法 支持，所以你根本就不应该这样做。
// 此外，class 语法仍然面临意外屏蔽的问题：
// class C {      constructor(id) {         // 噢，郁闷，我们的 id 属性屏蔽了 id() 方法         this.id = id;     }     id() {         console.log( "Id: " + id );     } }  
 
// var c1 = new C( "c1" ); c1.id(); // TypeError -- c1.id 现在是字符串 "c1"
// 除此之外，super 也存在一些非常细微的问题。你可能认为 super 的绑定方法和 this 类似 （参见第 2 章） ，也就是说，无论目前的方法在原型链中处于什么位置，super 总会绑定到 链中的上一层。
// 然而，出于性能考虑（this 绑定已经是很大的开销了），super 并不是动态绑定的，它会在 声明时“静态”绑定。


// ，会用许多不同的方 法把函数应用在不同的（使用 class 定义的）对象上，那你可能不知道，每次执行这些操 作时都必须重新绑定 super。
// ，根据应用方式的不同，super 可能不会绑定到合适的对象（至少和你想的不一样），

// 需要用 toMethod(..) 来手动绑定 super

// （类似用 bind(..) 来绑定 this

// 已经习惯了把方法应用到不同的对象上，从而可以自动利用 this 的隐式绑定规则（参见 第 2 章）。但是这对于 super 来说是行不通的。
// 思考下面代码中 super 的行为（D 和 E 上）：
// class P {     foo() { console.log( "P.foo" ); } } 
 
// class C extends P {      foo() {         super();      } } 
 
// var c1 = new C(); c1.foo(); // "P.foo" 
 
// var D = {     foo: function() { console.log( "D.foo" ); } }; 
 
// var E = {     foo: C.prototype.foo }; 
 
// // 把 E 委托到 D Object.setPrototypeOf( E, D );  
 
// E.foo(); // "P.foo"
// 如果你认为 super 会动态绑定（非常合理！），那你可能期望 super() 会自动识别出 E 委托 了 D，所以 E.foo() 中的 super() 应该调用 D.foo()。
// 但事实并不是这样。出于性能考虑，super 并不像 this 一样是晚绑定（late bound， 或者说 动态绑定）的，它在 [[HomeObject]].[[Prototype]] 上，[[HomeObject]] 会在创建时静态 绑定。
// 在本例中，super() 会调用 P.foo()，因为方法的 [[HomeObject]] 仍然是 C，C.[[Prototype]] 是 P。
// 确实可以手动修改 super 绑定，使用 toMethod(..) 绑定或重新绑定方法的 [[HomeObject]] （就像设置对象的 [[Prototype]] 一样！）就可以解决本例的问题：
// var D = {     foo: function() { console.log( "D.foo" ); } 
// 194   ｜   附录 A
// }; 
 
// // 把 E 委托到 D var E = Object.create( D ); 
 
// // 手动把 foo 的 [[HomeObject]] 绑定到 E，E.[[Prototype]] 是 D， 所以 super() 是 D.foo() E.foo = C.prototype.foo.toMethod( E, "foo" ); 
 
// E.foo(); // "D.foo"
// toMethod(..) 会复制方法并把 homeObject 当作第一个参数（也就是我们传入 的 E），第二个参数（可选）是新方法的名称（默认是原方法名）。
// 除此之外，开发者还有可能会遇到其他问题，这有待观察。无论如何，对于引擎自动绑定 的 super 来说，你必须时刻警惕是否需要进行手动绑定




// A.3　静态大于动态吗

// ES6 的 class 最大的问题在于，（像传统的类一样）它的语 法有时会让你认为，定义了一个 class 后，它就变成了一个（未来会被实例化的）东西的 静态定义。你会彻底忽略 C 是一个对象，是一个具体的可以直接交互的东西。
// 在传统面向类的语言中，类定义之后就不会进行修改，所以类的设计模式就不支持修改。 但是 JavaScript 最强大的特性之一就是它的动态性，任何对象的定义都可以修改（除非你 把它设置成不可变）。
// class 似乎不赞成这样做，所以强制让你使用丑陋的 .prototype 语法以及 super 问题，等 等。而且对于这种动态产生的问题，class 基本上都没有提供解决方案。
// 换句话说，class 似乎想告诉你：“动态太难实现了，所以这可能不是个好主意。这里有一 种看起来像静态的语法，所以编写静态代码吧。”
// 对于 JavaScript 来说这是多么悲伤的评论啊：动态太难实现了，我们假装成静态吧。（但是 实际上并不是！）
// 总地来说，ES6 的 class 想伪装成一种很好的语法问题的解决方案，但是实际上却让问题 更难解决而且让 JavaScript 更加难以理解。

// 如果你使用 .bind(..) 函数来硬绑定函数（参见第 2 章），那么这个函数不会 像普通函数那样被 ES6 的 extend 扩展到子类中。
// class 很好地伪装成 JavaScript 中类和继承设计模式的解决方案，但是它实际上起到了反作 用：它隐藏了许多问题并且带来了更多更细小但是危险的问题。
// class 加深了过去 20 年中对于 JavaScript 中“类”的误解，在某些方面，它产生的问题比 解决的多，而且让本来优雅简洁的 [[Prototype]] 机制变得非常别扭。
// 结论：如果 ES6 的 class 让 [[Prototype]] 变得更加难用而且隐藏了 JavaScript 对象最重要 的机制――对象之间的实时委托关联，我们难道不应该认为 class 产生的问题比解决的多 吗？

